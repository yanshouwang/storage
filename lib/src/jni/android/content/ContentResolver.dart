// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

import '../../java/lang/CharSequence.dart' as charsequence_;

/// from: `android.content.ContentResolver$MimeTypeInfo`
class ContentResolver_MimeTypeInfo extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<ContentResolver_MimeTypeInfo> $type;

  @_$jni.internal
  ContentResolver_MimeTypeInfo.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/content/ContentResolver$MimeTypeInfo');

  /// The type which includes information such as the signature of this class.
  static const type = $ContentResolver_MimeTypeInfo$Type();
  static final _id_getIcon = _class.instanceMethodId(
    r'getIcon',
    r'()Landroid/graphics/drawable/Icon;',
  );

  static final _getIcon = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.graphics.drawable.Icon getIcon()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getIcon() {
    return _getIcon(reference.pointer, _id_getIcon as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_getLabel = _class.instanceMethodId(
    r'getLabel',
    r'()Ljava/lang/CharSequence;',
  );

  static final _getLabel = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.CharSequence getLabel()`
  /// The returned object must be released after use, by calling the [release] method.
  charsequence_.CharSequence getLabel() {
    return _getLabel(reference.pointer, _id_getLabel as _$jni.JMethodIDPtr)
        .object(const charsequence_.$CharSequence$Type());
  }

  static final _id_getContentDescription = _class.instanceMethodId(
    r'getContentDescription',
    r'()Ljava/lang/CharSequence;',
  );

  static final _getContentDescription = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.CharSequence getContentDescription()`
  /// The returned object must be released after use, by calling the [release] method.
  charsequence_.CharSequence getContentDescription() {
    return _getContentDescription(
            reference.pointer, _id_getContentDescription as _$jni.JMethodIDPtr)
        .object(const charsequence_.$CharSequence$Type());
  }
}

final class $ContentResolver_MimeTypeInfo$Type
    extends _$jni.JObjType<ContentResolver_MimeTypeInfo> {
  @_$jni.internal
  const $ContentResolver_MimeTypeInfo$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/content/ContentResolver$MimeTypeInfo;';

  @_$jni.internal
  @_$core.override
  ContentResolver_MimeTypeInfo fromReference(_$jni.JReference reference) =>
      ContentResolver_MimeTypeInfo.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($ContentResolver_MimeTypeInfo$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContentResolver_MimeTypeInfo$Type) &&
        other is $ContentResolver_MimeTypeInfo$Type;
  }
}

/// from: `android.content.ContentResolver`
class ContentResolver extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<ContentResolver> $type;

  @_$jni.internal
  ContentResolver.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/content/ContentResolver');

  /// The type which includes information such as the signature of this class.
  static const type = $ContentResolver$Type();
  static final _id_ANY_CURSOR_ITEM_TYPE = _class.staticFieldId(
    r'ANY_CURSOR_ITEM_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ANY_CURSOR_ITEM_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get ANY_CURSOR_ITEM_TYPE =>
      _id_ANY_CURSOR_ITEM_TYPE.get(_class, const _$jni.JStringType());

  static final _id_CURSOR_DIR_BASE_TYPE = _class.staticFieldId(
    r'CURSOR_DIR_BASE_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CURSOR_DIR_BASE_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get CURSOR_DIR_BASE_TYPE =>
      _id_CURSOR_DIR_BASE_TYPE.get(_class, const _$jni.JStringType());

  static final _id_CURSOR_ITEM_BASE_TYPE = _class.staticFieldId(
    r'CURSOR_ITEM_BASE_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CURSOR_ITEM_BASE_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get CURSOR_ITEM_BASE_TYPE =>
      _id_CURSOR_ITEM_BASE_TYPE.get(_class, const _$jni.JStringType());

  static final _id_EXTRA_HONORED_ARGS = _class.staticFieldId(
    r'EXTRA_HONORED_ARGS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_HONORED_ARGS`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get EXTRA_HONORED_ARGS =>
      _id_EXTRA_HONORED_ARGS.get(_class, const _$jni.JStringType());

  static final _id_EXTRA_REFRESH_SUPPORTED = _class.staticFieldId(
    r'EXTRA_REFRESH_SUPPORTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_REFRESH_SUPPORTED`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get EXTRA_REFRESH_SUPPORTED =>
      _id_EXTRA_REFRESH_SUPPORTED.get(_class, const _$jni.JStringType());

  static final _id_EXTRA_SIZE = _class.staticFieldId(
    r'EXTRA_SIZE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SIZE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get EXTRA_SIZE =>
      _id_EXTRA_SIZE.get(_class, const _$jni.JStringType());

  static final _id_EXTRA_TOTAL_COUNT = _class.staticFieldId(
    r'EXTRA_TOTAL_COUNT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_TOTAL_COUNT`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get EXTRA_TOTAL_COUNT =>
      _id_EXTRA_TOTAL_COUNT.get(_class, const _$jni.JStringType());

  /// from: `static public final int NOTIFY_DELETE`
  static const NOTIFY_DELETE = 16;

  /// from: `static public final int NOTIFY_INSERT`
  static const NOTIFY_INSERT = 4;

  /// from: `static public final int NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS`
  static const NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS = 2;

  /// from: `static public final int NOTIFY_SYNC_TO_NETWORK`
  static const NOTIFY_SYNC_TO_NETWORK = 1;

  /// from: `static public final int NOTIFY_UPDATE`
  static const NOTIFY_UPDATE = 8;
  static final _id_QUERY_ARG_GROUP_COLUMNS = _class.staticFieldId(
    r'QUERY_ARG_GROUP_COLUMNS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String QUERY_ARG_GROUP_COLUMNS`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get QUERY_ARG_GROUP_COLUMNS =>
      _id_QUERY_ARG_GROUP_COLUMNS.get(_class, const _$jni.JStringType());

  static final _id_QUERY_ARG_LIMIT = _class.staticFieldId(
    r'QUERY_ARG_LIMIT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String QUERY_ARG_LIMIT`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get QUERY_ARG_LIMIT =>
      _id_QUERY_ARG_LIMIT.get(_class, const _$jni.JStringType());

  static final _id_QUERY_ARG_OFFSET = _class.staticFieldId(
    r'QUERY_ARG_OFFSET',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String QUERY_ARG_OFFSET`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get QUERY_ARG_OFFSET =>
      _id_QUERY_ARG_OFFSET.get(_class, const _$jni.JStringType());

  static final _id_QUERY_ARG_SORT_COLLATION = _class.staticFieldId(
    r'QUERY_ARG_SORT_COLLATION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String QUERY_ARG_SORT_COLLATION`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get QUERY_ARG_SORT_COLLATION =>
      _id_QUERY_ARG_SORT_COLLATION.get(_class, const _$jni.JStringType());

  static final _id_QUERY_ARG_SORT_COLUMNS = _class.staticFieldId(
    r'QUERY_ARG_SORT_COLUMNS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String QUERY_ARG_SORT_COLUMNS`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get QUERY_ARG_SORT_COLUMNS =>
      _id_QUERY_ARG_SORT_COLUMNS.get(_class, const _$jni.JStringType());

  static final _id_QUERY_ARG_SORT_DIRECTION = _class.staticFieldId(
    r'QUERY_ARG_SORT_DIRECTION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String QUERY_ARG_SORT_DIRECTION`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get QUERY_ARG_SORT_DIRECTION =>
      _id_QUERY_ARG_SORT_DIRECTION.get(_class, const _$jni.JStringType());

  static final _id_QUERY_ARG_SORT_LOCALE = _class.staticFieldId(
    r'QUERY_ARG_SORT_LOCALE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String QUERY_ARG_SORT_LOCALE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get QUERY_ARG_SORT_LOCALE =>
      _id_QUERY_ARG_SORT_LOCALE.get(_class, const _$jni.JStringType());

  static final _id_QUERY_ARG_SQL_GROUP_BY = _class.staticFieldId(
    r'QUERY_ARG_SQL_GROUP_BY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String QUERY_ARG_SQL_GROUP_BY`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get QUERY_ARG_SQL_GROUP_BY =>
      _id_QUERY_ARG_SQL_GROUP_BY.get(_class, const _$jni.JStringType());

  static final _id_QUERY_ARG_SQL_HAVING = _class.staticFieldId(
    r'QUERY_ARG_SQL_HAVING',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String QUERY_ARG_SQL_HAVING`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get QUERY_ARG_SQL_HAVING =>
      _id_QUERY_ARG_SQL_HAVING.get(_class, const _$jni.JStringType());

  static final _id_QUERY_ARG_SQL_LIMIT = _class.staticFieldId(
    r'QUERY_ARG_SQL_LIMIT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String QUERY_ARG_SQL_LIMIT`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get QUERY_ARG_SQL_LIMIT =>
      _id_QUERY_ARG_SQL_LIMIT.get(_class, const _$jni.JStringType());

  static final _id_QUERY_ARG_SQL_SELECTION = _class.staticFieldId(
    r'QUERY_ARG_SQL_SELECTION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String QUERY_ARG_SQL_SELECTION`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get QUERY_ARG_SQL_SELECTION =>
      _id_QUERY_ARG_SQL_SELECTION.get(_class, const _$jni.JStringType());

  static final _id_QUERY_ARG_SQL_SELECTION_ARGS = _class.staticFieldId(
    r'QUERY_ARG_SQL_SELECTION_ARGS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String QUERY_ARG_SQL_SELECTION_ARGS`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get QUERY_ARG_SQL_SELECTION_ARGS =>
      _id_QUERY_ARG_SQL_SELECTION_ARGS.get(_class, const _$jni.JStringType());

  static final _id_QUERY_ARG_SQL_SORT_ORDER = _class.staticFieldId(
    r'QUERY_ARG_SQL_SORT_ORDER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String QUERY_ARG_SQL_SORT_ORDER`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get QUERY_ARG_SQL_SORT_ORDER =>
      _id_QUERY_ARG_SQL_SORT_ORDER.get(_class, const _$jni.JStringType());

  /// from: `static public final int QUERY_SORT_DIRECTION_ASCENDING`
  static const QUERY_SORT_DIRECTION_ASCENDING = 0;

  /// from: `static public final int QUERY_SORT_DIRECTION_DESCENDING`
  static const QUERY_SORT_DIRECTION_DESCENDING = 1;
  static final _id_SCHEME_ANDROID_RESOURCE = _class.staticFieldId(
    r'SCHEME_ANDROID_RESOURCE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SCHEME_ANDROID_RESOURCE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get SCHEME_ANDROID_RESOURCE =>
      _id_SCHEME_ANDROID_RESOURCE.get(_class, const _$jni.JStringType());

  static final _id_SCHEME_CONTENT = _class.staticFieldId(
    r'SCHEME_CONTENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SCHEME_CONTENT`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get SCHEME_CONTENT =>
      _id_SCHEME_CONTENT.get(_class, const _$jni.JStringType());

  static final _id_SCHEME_FILE = _class.staticFieldId(
    r'SCHEME_FILE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SCHEME_FILE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get SCHEME_FILE =>
      _id_SCHEME_FILE.get(_class, const _$jni.JStringType());

  static final _id_SYNC_EXTRAS_ACCOUNT = _class.staticFieldId(
    r'SYNC_EXTRAS_ACCOUNT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SYNC_EXTRAS_ACCOUNT`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get SYNC_EXTRAS_ACCOUNT =>
      _id_SYNC_EXTRAS_ACCOUNT.get(_class, const _$jni.JStringType());

  static final _id_SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS = _class.staticFieldId(
    r'SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS =>
      _id_SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS.get(
          _class, const _$jni.JStringType());

  static final _id_SYNC_EXTRAS_DO_NOT_RETRY = _class.staticFieldId(
    r'SYNC_EXTRAS_DO_NOT_RETRY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SYNC_EXTRAS_DO_NOT_RETRY`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get SYNC_EXTRAS_DO_NOT_RETRY =>
      _id_SYNC_EXTRAS_DO_NOT_RETRY.get(_class, const _$jni.JStringType());

  static final _id_SYNC_EXTRAS_EXPEDITED = _class.staticFieldId(
    r'SYNC_EXTRAS_EXPEDITED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SYNC_EXTRAS_EXPEDITED`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get SYNC_EXTRAS_EXPEDITED =>
      _id_SYNC_EXTRAS_EXPEDITED.get(_class, const _$jni.JStringType());

  static final _id_SYNC_EXTRAS_FORCE = _class.staticFieldId(
    r'SYNC_EXTRAS_FORCE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SYNC_EXTRAS_FORCE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get SYNC_EXTRAS_FORCE =>
      _id_SYNC_EXTRAS_FORCE.get(_class, const _$jni.JStringType());

  static final _id_SYNC_EXTRAS_IGNORE_BACKOFF = _class.staticFieldId(
    r'SYNC_EXTRAS_IGNORE_BACKOFF',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SYNC_EXTRAS_IGNORE_BACKOFF`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get SYNC_EXTRAS_IGNORE_BACKOFF =>
      _id_SYNC_EXTRAS_IGNORE_BACKOFF.get(_class, const _$jni.JStringType());

  static final _id_SYNC_EXTRAS_IGNORE_SETTINGS = _class.staticFieldId(
    r'SYNC_EXTRAS_IGNORE_SETTINGS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SYNC_EXTRAS_IGNORE_SETTINGS`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get SYNC_EXTRAS_IGNORE_SETTINGS =>
      _id_SYNC_EXTRAS_IGNORE_SETTINGS.get(_class, const _$jni.JStringType());

  static final _id_SYNC_EXTRAS_INITIALIZE = _class.staticFieldId(
    r'SYNC_EXTRAS_INITIALIZE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SYNC_EXTRAS_INITIALIZE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get SYNC_EXTRAS_INITIALIZE =>
      _id_SYNC_EXTRAS_INITIALIZE.get(_class, const _$jni.JStringType());

  static final _id_SYNC_EXTRAS_MANUAL = _class.staticFieldId(
    r'SYNC_EXTRAS_MANUAL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SYNC_EXTRAS_MANUAL`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get SYNC_EXTRAS_MANUAL =>
      _id_SYNC_EXTRAS_MANUAL.get(_class, const _$jni.JStringType());

  static final _id_SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS =
      _class.staticFieldId(
    r'SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS =>
      _id_SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS.get(
          _class, const _$jni.JStringType());

  static final _id_SYNC_EXTRAS_REQUIRE_CHARGING = _class.staticFieldId(
    r'SYNC_EXTRAS_REQUIRE_CHARGING',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SYNC_EXTRAS_REQUIRE_CHARGING`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get SYNC_EXTRAS_REQUIRE_CHARGING =>
      _id_SYNC_EXTRAS_REQUIRE_CHARGING.get(_class, const _$jni.JStringType());

  static final _id_SYNC_EXTRAS_SCHEDULE_AS_EXPEDITED_JOB = _class.staticFieldId(
    r'SYNC_EXTRAS_SCHEDULE_AS_EXPEDITED_JOB',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SYNC_EXTRAS_SCHEDULE_AS_EXPEDITED_JOB`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get SYNC_EXTRAS_SCHEDULE_AS_EXPEDITED_JOB =>
      _id_SYNC_EXTRAS_SCHEDULE_AS_EXPEDITED_JOB.get(
          _class, const _$jni.JStringType());

  static final _id_SYNC_EXTRAS_UPLOAD = _class.staticFieldId(
    r'SYNC_EXTRAS_UPLOAD',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SYNC_EXTRAS_UPLOAD`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get SYNC_EXTRAS_UPLOAD =>
      _id_SYNC_EXTRAS_UPLOAD.get(_class, const _$jni.JStringType());

  /// from: `static public final int SYNC_OBSERVER_TYPE_ACTIVE`
  static const SYNC_OBSERVER_TYPE_ACTIVE = 4;

  /// from: `static public final int SYNC_OBSERVER_TYPE_PENDING`
  static const SYNC_OBSERVER_TYPE_PENDING = 2;

  /// from: `static public final int SYNC_OBSERVER_TYPE_SETTINGS`
  static const SYNC_OBSERVER_TYPE_SETTINGS = 1;
  static final _id_wrap = _class.staticMethodId(
    r'wrap',
    r'(Landroid/content/ContentProvider;)Landroid/content/ContentResolver;',
  );

  static final _wrap = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public android.content.ContentResolver wrap(android.content.ContentProvider contentProvider)`
  /// The returned object must be released after use, by calling the [release] method.
  static ContentResolver wrap(
    _$jni.JObject contentProvider,
  ) {
    return _wrap(_class.reference.pointer, _id_wrap as _$jni.JMethodIDPtr,
            contentProvider.reference.pointer)
        .object(const $ContentResolver$Type());
  }

  static final _id_wrap$1 = _class.staticMethodId(
    r'wrap',
    r'(Landroid/content/ContentProviderClient;)Landroid/content/ContentResolver;',
  );

  static final _wrap$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public android.content.ContentResolver wrap(android.content.ContentProviderClient contentProviderClient)`
  /// The returned object must be released after use, by calling the [release] method.
  static ContentResolver wrap$1(
    _$jni.JObject contentProviderClient,
  ) {
    return _wrap$1(_class.reference.pointer, _id_wrap$1 as _$jni.JMethodIDPtr,
            contentProviderClient.reference.pointer)
        .object(const $ContentResolver$Type());
  }

  static final _id_getType = _class.instanceMethodId(
    r'getType',
    r'(Landroid/net/Uri;)Ljava/lang/String;',
  );

  static final _getType = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final java.lang.String getType(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getType(
    _$jni.JObject uri,
  ) {
    return _getType(reference.pointer, _id_getType as _$jni.JMethodIDPtr,
            uri.reference.pointer)
        .object(const _$jni.JStringType());
  }

  static final _id_getStreamTypes = _class.instanceMethodId(
    r'getStreamTypes',
    r'(Landroid/net/Uri;Ljava/lang/String;)[Ljava/lang/String;',
  );

  static final _getStreamTypes = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public java.lang.String[] getStreamTypes(android.net.Uri uri, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JArray<_$jni.JString> getStreamTypes(
    _$jni.JObject uri,
    _$jni.JString string,
  ) {
    return _getStreamTypes(
            reference.pointer,
            _id_getStreamTypes as _$jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer)
        .object(const _$jni.JArrayType(_$jni.JStringType()));
  }

  static final _id_query = _class.instanceMethodId(
    r'query',
    r'(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;',
  );

  static final _query = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final android.database.Cursor query(android.net.Uri uri, java.lang.String[] strings, java.lang.String string, java.lang.String[] strings1, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject query(
    _$jni.JObject uri,
    _$jni.JArray<_$jni.JString> strings,
    _$jni.JString string,
    _$jni.JArray<_$jni.JString> strings1,
    _$jni.JString string1,
  ) {
    return _query(
            reference.pointer,
            _id_query as _$jni.JMethodIDPtr,
            uri.reference.pointer,
            strings.reference.pointer,
            string.reference.pointer,
            strings1.reference.pointer,
            string1.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_query$1 = _class.instanceMethodId(
    r'query',
    r'(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;',
  );

  static final _query$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final android.database.Cursor query(android.net.Uri uri, java.lang.String[] strings, java.lang.String string, java.lang.String[] strings1, java.lang.String string1, android.os.CancellationSignal cancellationSignal)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject query$1(
    _$jni.JObject uri,
    _$jni.JArray<_$jni.JString> strings,
    _$jni.JString string,
    _$jni.JArray<_$jni.JString> strings1,
    _$jni.JString string1,
    _$jni.JObject cancellationSignal,
  ) {
    return _query$1(
            reference.pointer,
            _id_query$1 as _$jni.JMethodIDPtr,
            uri.reference.pointer,
            strings.reference.pointer,
            string.reference.pointer,
            strings1.reference.pointer,
            string1.reference.pointer,
            cancellationSignal.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_query$2 = _class.instanceMethodId(
    r'query',
    r'(Landroid/net/Uri;[Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Landroid/database/Cursor;',
  );

  static final _query$2 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final android.database.Cursor query(android.net.Uri uri, java.lang.String[] strings, android.os.Bundle bundle, android.os.CancellationSignal cancellationSignal)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject query$2(
    _$jni.JObject uri,
    _$jni.JArray<_$jni.JString> strings,
    _$jni.JObject bundle,
    _$jni.JObject cancellationSignal,
  ) {
    return _query$2(
            reference.pointer,
            _id_query$2 as _$jni.JMethodIDPtr,
            uri.reference.pointer,
            strings.reference.pointer,
            bundle.reference.pointer,
            cancellationSignal.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_canonicalize = _class.instanceMethodId(
    r'canonicalize',
    r'(Landroid/net/Uri;)Landroid/net/Uri;',
  );

  static final _canonicalize = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final android.net.Uri canonicalize(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject canonicalize(
    _$jni.JObject uri,
  ) {
    return _canonicalize(reference.pointer,
            _id_canonicalize as _$jni.JMethodIDPtr, uri.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_uncanonicalize = _class.instanceMethodId(
    r'uncanonicalize',
    r'(Landroid/net/Uri;)Landroid/net/Uri;',
  );

  static final _uncanonicalize = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final android.net.Uri uncanonicalize(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject uncanonicalize(
    _$jni.JObject uri,
  ) {
    return _uncanonicalize(reference.pointer,
            _id_uncanonicalize as _$jni.JMethodIDPtr, uri.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_refresh = _class.instanceMethodId(
    r'refresh',
    r'(Landroid/net/Uri;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Z',
  );

  static final _refresh = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final boolean refresh(android.net.Uri uri, android.os.Bundle bundle, android.os.CancellationSignal cancellationSignal)`
  bool refresh(
    _$jni.JObject uri,
    _$jni.JObject bundle,
    _$jni.JObject cancellationSignal,
  ) {
    return _refresh(
            reference.pointer,
            _id_refresh as _$jni.JMethodIDPtr,
            uri.reference.pointer,
            bundle.reference.pointer,
            cancellationSignal.reference.pointer)
        .boolean;
  }

  static final _id_openInputStream = _class.instanceMethodId(
    r'openInputStream',
    r'(Landroid/net/Uri;)Ljava/io/InputStream;',
  );

  static final _openInputStream = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final java.io.InputStream openInputStream(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject openInputStream(
    _$jni.JObject uri,
  ) {
    return _openInputStream(reference.pointer,
            _id_openInputStream as _$jni.JMethodIDPtr, uri.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_openOutputStream = _class.instanceMethodId(
    r'openOutputStream',
    r'(Landroid/net/Uri;)Ljava/io/OutputStream;',
  );

  static final _openOutputStream = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final java.io.OutputStream openOutputStream(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject openOutputStream(
    _$jni.JObject uri,
  ) {
    return _openOutputStream(reference.pointer,
            _id_openOutputStream as _$jni.JMethodIDPtr, uri.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_openOutputStream$1 = _class.instanceMethodId(
    r'openOutputStream',
    r'(Landroid/net/Uri;Ljava/lang/String;)Ljava/io/OutputStream;',
  );

  static final _openOutputStream$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final java.io.OutputStream openOutputStream(android.net.Uri uri, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject openOutputStream$1(
    _$jni.JObject uri,
    _$jni.JString string,
  ) {
    return _openOutputStream$1(
            reference.pointer,
            _id_openOutputStream$1 as _$jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_openFile = _class.instanceMethodId(
    r'openFile',
    r'(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/os/ParcelFileDescriptor;',
  );

  static final _openFile = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final android.os.ParcelFileDescriptor openFile(android.net.Uri uri, java.lang.String string, android.os.CancellationSignal cancellationSignal)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject openFile(
    _$jni.JObject uri,
    _$jni.JString string,
    _$jni.JObject cancellationSignal,
  ) {
    return _openFile(
            reference.pointer,
            _id_openFile as _$jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer,
            cancellationSignal.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_openFileDescriptor = _class.instanceMethodId(
    r'openFileDescriptor',
    r'(Landroid/net/Uri;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;',
  );

  static final _openFileDescriptor = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri uri, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject openFileDescriptor(
    _$jni.JObject uri,
    _$jni.JString string,
  ) {
    return _openFileDescriptor(
            reference.pointer,
            _id_openFileDescriptor as _$jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_openFileDescriptor$1 = _class.instanceMethodId(
    r'openFileDescriptor',
    r'(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/os/ParcelFileDescriptor;',
  );

  static final _openFileDescriptor$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri uri, java.lang.String string, android.os.CancellationSignal cancellationSignal)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject openFileDescriptor$1(
    _$jni.JObject uri,
    _$jni.JString string,
    _$jni.JObject cancellationSignal,
  ) {
    return _openFileDescriptor$1(
            reference.pointer,
            _id_openFileDescriptor$1 as _$jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer,
            cancellationSignal.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_openAssetFile = _class.instanceMethodId(
    r'openAssetFile',
    r'(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;',
  );

  static final _openAssetFile = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri uri, java.lang.String string, android.os.CancellationSignal cancellationSignal)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject openAssetFile(
    _$jni.JObject uri,
    _$jni.JString string,
    _$jni.JObject cancellationSignal,
  ) {
    return _openAssetFile(
            reference.pointer,
            _id_openAssetFile as _$jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer,
            cancellationSignal.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_openAssetFileDescriptor = _class.instanceMethodId(
    r'openAssetFileDescriptor',
    r'(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;',
  );

  static final _openAssetFileDescriptor = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri uri, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject openAssetFileDescriptor(
    _$jni.JObject uri,
    _$jni.JString string,
  ) {
    return _openAssetFileDescriptor(
            reference.pointer,
            _id_openAssetFileDescriptor as _$jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_openAssetFileDescriptor$1 = _class.instanceMethodId(
    r'openAssetFileDescriptor',
    r'(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;',
  );

  static final _openAssetFileDescriptor$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri uri, java.lang.String string, android.os.CancellationSignal cancellationSignal)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject openAssetFileDescriptor$1(
    _$jni.JObject uri,
    _$jni.JString string,
    _$jni.JObject cancellationSignal,
  ) {
    return _openAssetFileDescriptor$1(
            reference.pointer,
            _id_openAssetFileDescriptor$1 as _$jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer,
            cancellationSignal.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_openTypedAssetFile = _class.instanceMethodId(
    r'openTypedAssetFile',
    r'(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;',
  );

  static final _openTypedAssetFile = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri uri, java.lang.String string, android.os.Bundle bundle, android.os.CancellationSignal cancellationSignal)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject openTypedAssetFile(
    _$jni.JObject uri,
    _$jni.JString string,
    _$jni.JObject bundle,
    _$jni.JObject cancellationSignal,
  ) {
    return _openTypedAssetFile(
            reference.pointer,
            _id_openTypedAssetFile as _$jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer,
            bundle.reference.pointer,
            cancellationSignal.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_openTypedAssetFileDescriptor = _class.instanceMethodId(
    r'openTypedAssetFileDescriptor',
    r'(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;)Landroid/content/res/AssetFileDescriptor;',
  );

  static final _openTypedAssetFileDescriptor =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri uri, java.lang.String string, android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject openTypedAssetFileDescriptor(
    _$jni.JObject uri,
    _$jni.JString string,
    _$jni.JObject bundle,
  ) {
    return _openTypedAssetFileDescriptor(
            reference.pointer,
            _id_openTypedAssetFileDescriptor as _$jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer,
            bundle.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_openTypedAssetFileDescriptor$1 = _class.instanceMethodId(
    r'openTypedAssetFileDescriptor',
    r'(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;',
  );

  static final _openTypedAssetFileDescriptor$1 =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri uri, java.lang.String string, android.os.Bundle bundle, android.os.CancellationSignal cancellationSignal)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject openTypedAssetFileDescriptor$1(
    _$jni.JObject uri,
    _$jni.JString string,
    _$jni.JObject bundle,
    _$jni.JObject cancellationSignal,
  ) {
    return _openTypedAssetFileDescriptor$1(
            reference.pointer,
            _id_openTypedAssetFileDescriptor$1 as _$jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer,
            bundle.reference.pointer,
            cancellationSignal.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_insert = _class.instanceMethodId(
    r'insert',
    r'(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;',
  );

  static final _insert = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final android.net.Uri insert(android.net.Uri uri, android.content.ContentValues contentValues)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject insert(
    _$jni.JObject uri,
    _$jni.JObject contentValues,
  ) {
    return _insert(reference.pointer, _id_insert as _$jni.JMethodIDPtr,
            uri.reference.pointer, contentValues.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_insert$1 = _class.instanceMethodId(
    r'insert',
    r'(Landroid/net/Uri;Landroid/content/ContentValues;Landroid/os/Bundle;)Landroid/net/Uri;',
  );

  static final _insert$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final android.net.Uri insert(android.net.Uri uri, android.content.ContentValues contentValues, android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject insert$1(
    _$jni.JObject uri,
    _$jni.JObject contentValues,
    _$jni.JObject bundle,
  ) {
    return _insert$1(
            reference.pointer,
            _id_insert$1 as _$jni.JMethodIDPtr,
            uri.reference.pointer,
            contentValues.reference.pointer,
            bundle.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_applyBatch = _class.instanceMethodId(
    r'applyBatch',
    r'(Ljava/lang/String;Ljava/util/ArrayList;)[Landroid/content/ContentProviderResult;',
  );

  static final _applyBatch = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public java.lang.Object[] applyBatch(java.lang.String string, java.util.ArrayList arrayList)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JArray<_$jni.JObject> applyBatch(
    _$jni.JString string,
    _$jni.JObject arrayList,
  ) {
    return _applyBatch(reference.pointer, _id_applyBatch as _$jni.JMethodIDPtr,
            string.reference.pointer, arrayList.reference.pointer)
        .object(const _$jni.JArrayType(_$jni.JObjectType()));
  }

  static final _id_bulkInsert = _class.instanceMethodId(
    r'bulkInsert',
    r'(Landroid/net/Uri;[Landroid/content/ContentValues;)I',
  );

  static final _bulkInsert = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final int bulkInsert(android.net.Uri uri, android.content.ContentValues[] contentValuess)`
  int bulkInsert(
    _$jni.JObject uri,
    _$jni.JArray<_$jni.JObject> contentValuess,
  ) {
    return _bulkInsert(reference.pointer, _id_bulkInsert as _$jni.JMethodIDPtr,
            uri.reference.pointer, contentValuess.reference.pointer)
        .integer;
  }

  static final _id_delete = _class.instanceMethodId(
    r'delete',
    r'(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I',
  );

  static final _delete = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final int delete(android.net.Uri uri, java.lang.String string, java.lang.String[] strings)`
  int delete(
    _$jni.JObject uri,
    _$jni.JString string,
    _$jni.JArray<_$jni.JString> strings,
  ) {
    return _delete(
            reference.pointer,
            _id_delete as _$jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer,
            strings.reference.pointer)
        .integer;
  }

  static final _id_delete$1 = _class.instanceMethodId(
    r'delete',
    r'(Landroid/net/Uri;Landroid/os/Bundle;)I',
  );

  static final _delete$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final int delete(android.net.Uri uri, android.os.Bundle bundle)`
  int delete$1(
    _$jni.JObject uri,
    _$jni.JObject bundle,
  ) {
    return _delete$1(reference.pointer, _id_delete$1 as _$jni.JMethodIDPtr,
            uri.reference.pointer, bundle.reference.pointer)
        .integer;
  }

  static final _id_update = _class.instanceMethodId(
    r'update',
    r'(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I',
  );

  static final _update = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final int update(android.net.Uri uri, android.content.ContentValues contentValues, java.lang.String string, java.lang.String[] strings)`
  int update(
    _$jni.JObject uri,
    _$jni.JObject contentValues,
    _$jni.JString string,
    _$jni.JArray<_$jni.JString> strings,
  ) {
    return _update(
            reference.pointer,
            _id_update as _$jni.JMethodIDPtr,
            uri.reference.pointer,
            contentValues.reference.pointer,
            string.reference.pointer,
            strings.reference.pointer)
        .integer;
  }

  static final _id_update$1 = _class.instanceMethodId(
    r'update',
    r'(Landroid/net/Uri;Landroid/content/ContentValues;Landroid/os/Bundle;)I',
  );

  static final _update$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final int update(android.net.Uri uri, android.content.ContentValues contentValues, android.os.Bundle bundle)`
  int update$1(
    _$jni.JObject uri,
    _$jni.JObject contentValues,
    _$jni.JObject bundle,
  ) {
    return _update$1(
            reference.pointer,
            _id_update$1 as _$jni.JMethodIDPtr,
            uri.reference.pointer,
            contentValues.reference.pointer,
            bundle.reference.pointer)
        .integer;
  }

  static final _id_call = _class.instanceMethodId(
    r'call',
    r'(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;',
  );

  static final _call = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final android.os.Bundle call(android.net.Uri uri, java.lang.String string, java.lang.String string1, android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject call(
    _$jni.JObject uri,
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JObject bundle,
  ) {
    return _call(
            reference.pointer,
            _id_call as _$jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer,
            string1.reference.pointer,
            bundle.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_call$1 = _class.instanceMethodId(
    r'call',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;',
  );

  static final _call$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final android.os.Bundle call(java.lang.String string, java.lang.String string1, java.lang.String string2, android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject call$1(
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JString string2,
    _$jni.JObject bundle,
  ) {
    return _call$1(
            reference.pointer,
            _id_call$1 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer,
            bundle.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_acquireContentProviderClient = _class.instanceMethodId(
    r'acquireContentProviderClient',
    r'(Landroid/net/Uri;)Landroid/content/ContentProviderClient;',
  );

  static final _acquireContentProviderClient =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final android.content.ContentProviderClient acquireContentProviderClient(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject acquireContentProviderClient(
    _$jni.JObject uri,
  ) {
    return _acquireContentProviderClient(
            reference.pointer,
            _id_acquireContentProviderClient as _$jni.JMethodIDPtr,
            uri.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_acquireContentProviderClient$1 = _class.instanceMethodId(
    r'acquireContentProviderClient',
    r'(Ljava/lang/String;)Landroid/content/ContentProviderClient;',
  );

  static final _acquireContentProviderClient$1 =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final android.content.ContentProviderClient acquireContentProviderClient(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject acquireContentProviderClient$1(
    _$jni.JString string,
  ) {
    return _acquireContentProviderClient$1(
            reference.pointer,
            _id_acquireContentProviderClient$1 as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_acquireUnstableContentProviderClient =
      _class.instanceMethodId(
    r'acquireUnstableContentProviderClient',
    r'(Landroid/net/Uri;)Landroid/content/ContentProviderClient;',
  );

  static final _acquireUnstableContentProviderClient =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final android.content.ContentProviderClient acquireUnstableContentProviderClient(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject acquireUnstableContentProviderClient(
    _$jni.JObject uri,
  ) {
    return _acquireUnstableContentProviderClient(
            reference.pointer,
            _id_acquireUnstableContentProviderClient as _$jni.JMethodIDPtr,
            uri.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_acquireUnstableContentProviderClient$1 =
      _class.instanceMethodId(
    r'acquireUnstableContentProviderClient',
    r'(Ljava/lang/String;)Landroid/content/ContentProviderClient;',
  );

  static final _acquireUnstableContentProviderClient$1 =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final android.content.ContentProviderClient acquireUnstableContentProviderClient(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject acquireUnstableContentProviderClient$1(
    _$jni.JString string,
  ) {
    return _acquireUnstableContentProviderClient$1(
            reference.pointer,
            _id_acquireUnstableContentProviderClient$1 as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_registerContentObserver = _class.instanceMethodId(
    r'registerContentObserver',
    r'(Landroid/net/Uri;ZLandroid/database/ContentObserver;)V',
  );

  static final _registerContentObserver = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              int,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final void registerContentObserver(android.net.Uri uri, boolean z, android.database.ContentObserver contentObserver)`
  void registerContentObserver(
    _$jni.JObject uri,
    bool z,
    _$jni.JObject contentObserver,
  ) {
    _registerContentObserver(
            reference.pointer,
            _id_registerContentObserver as _$jni.JMethodIDPtr,
            uri.reference.pointer,
            z ? 1 : 0,
            contentObserver.reference.pointer)
        .check();
  }

  static final _id_unregisterContentObserver = _class.instanceMethodId(
    r'unregisterContentObserver',
    r'(Landroid/database/ContentObserver;)V',
  );

  static final _unregisterContentObserver = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final void unregisterContentObserver(android.database.ContentObserver contentObserver)`
  void unregisterContentObserver(
    _$jni.JObject contentObserver,
  ) {
    _unregisterContentObserver(
            reference.pointer,
            _id_unregisterContentObserver as _$jni.JMethodIDPtr,
            contentObserver.reference.pointer)
        .check();
  }

  static final _id_notifyChange = _class.instanceMethodId(
    r'notifyChange',
    r'(Landroid/net/Uri;Landroid/database/ContentObserver;)V',
  );

  static final _notifyChange = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void notifyChange(android.net.Uri uri, android.database.ContentObserver contentObserver)`
  void notifyChange(
    _$jni.JObject uri,
    _$jni.JObject contentObserver,
  ) {
    _notifyChange(reference.pointer, _id_notifyChange as _$jni.JMethodIDPtr,
            uri.reference.pointer, contentObserver.reference.pointer)
        .check();
  }

  static final _id_notifyChange$1 = _class.instanceMethodId(
    r'notifyChange',
    r'(Landroid/net/Uri;Landroid/database/ContentObserver;Z)V',
  );

  static final _notifyChange$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int)>();

  /// from: `public void notifyChange(android.net.Uri uri, android.database.ContentObserver contentObserver, boolean z)`
  void notifyChange$1(
    _$jni.JObject uri,
    _$jni.JObject contentObserver,
    bool z,
  ) {
    _notifyChange$1(reference.pointer, _id_notifyChange$1 as _$jni.JMethodIDPtr,
            uri.reference.pointer, contentObserver.reference.pointer, z ? 1 : 0)
        .check();
  }

  static final _id_notifyChange$2 = _class.instanceMethodId(
    r'notifyChange',
    r'(Landroid/net/Uri;Landroid/database/ContentObserver;I)V',
  );

  static final _notifyChange$2 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int)>();

  /// from: `public void notifyChange(android.net.Uri uri, android.database.ContentObserver contentObserver, int i)`
  void notifyChange$2(
    _$jni.JObject uri,
    _$jni.JObject contentObserver,
    int i,
  ) {
    _notifyChange$2(reference.pointer, _id_notifyChange$2 as _$jni.JMethodIDPtr,
            uri.reference.pointer, contentObserver.reference.pointer, i)
        .check();
  }

  static final _id_notifyChange$3 = _class.instanceMethodId(
    r'notifyChange',
    r'(Ljava/util/Collection;Landroid/database/ContentObserver;I)V',
  );

  static final _notifyChange$3 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int)>();

  /// from: `public void notifyChange(java.util.Collection collection, android.database.ContentObserver contentObserver, int i)`
  void notifyChange$3(
    _$jni.JObject collection,
    _$jni.JObject contentObserver,
    int i,
  ) {
    _notifyChange$3(reference.pointer, _id_notifyChange$3 as _$jni.JMethodIDPtr,
            collection.reference.pointer, contentObserver.reference.pointer, i)
        .check();
  }

  static final _id_takePersistableUriPermission = _class.instanceMethodId(
    r'takePersistableUriPermission',
    r'(Landroid/net/Uri;I)V',
  );

  static final _takePersistableUriPermission =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Int32
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public void takePersistableUriPermission(android.net.Uri uri, int i)`
  void takePersistableUriPermission(
    _$jni.JObject uri,
    int i,
  ) {
    _takePersistableUriPermission(
            reference.pointer,
            _id_takePersistableUriPermission as _$jni.JMethodIDPtr,
            uri.reference.pointer,
            i)
        .check();
  }

  static final _id_releasePersistableUriPermission = _class.instanceMethodId(
    r'releasePersistableUriPermission',
    r'(Landroid/net/Uri;I)V',
  );

  static final _releasePersistableUriPermission =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Int32
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public void releasePersistableUriPermission(android.net.Uri uri, int i)`
  void releasePersistableUriPermission(
    _$jni.JObject uri,
    int i,
  ) {
    _releasePersistableUriPermission(
            reference.pointer,
            _id_releasePersistableUriPermission as _$jni.JMethodIDPtr,
            uri.reference.pointer,
            i)
        .check();
  }

  static final _id_getPersistedUriPermissions = _class.instanceMethodId(
    r'getPersistedUriPermissions',
    r'()Ljava/util/List;',
  );

  static final _getPersistedUriPermissions =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public java.util.List getPersistedUriPermissions()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> getPersistedUriPermissions() {
    return _getPersistedUriPermissions(reference.pointer,
            _id_getPersistedUriPermissions as _$jni.JMethodIDPtr)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_getOutgoingPersistedUriPermissions = _class.instanceMethodId(
    r'getOutgoingPersistedUriPermissions',
    r'()Ljava/util/List;',
  );

  static final _getOutgoingPersistedUriPermissions =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public java.util.List getOutgoingPersistedUriPermissions()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> getOutgoingPersistedUriPermissions() {
    return _getOutgoingPersistedUriPermissions(reference.pointer,
            _id_getOutgoingPersistedUriPermissions as _$jni.JMethodIDPtr)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_startSync = _class.instanceMethodId(
    r'startSync',
    r'(Landroid/net/Uri;Landroid/os/Bundle;)V',
  );

  static final _startSync = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void startSync(android.net.Uri uri, android.os.Bundle bundle)`
  void startSync(
    _$jni.JObject uri,
    _$jni.JObject bundle,
  ) {
    _startSync(reference.pointer, _id_startSync as _$jni.JMethodIDPtr,
            uri.reference.pointer, bundle.reference.pointer)
        .check();
  }

  static final _id_requestSync = _class.staticMethodId(
    r'requestSync',
    r'(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _requestSync = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void requestSync(android.accounts.Account account, java.lang.String string, android.os.Bundle bundle)`
  static void requestSync(
    _$jni.JObject account,
    _$jni.JString string,
    _$jni.JObject bundle,
  ) {
    _requestSync(
            _class.reference.pointer,
            _id_requestSync as _$jni.JMethodIDPtr,
            account.reference.pointer,
            string.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_requestSync$1 = _class.staticMethodId(
    r'requestSync',
    r'(Landroid/content/SyncRequest;)V',
  );

  static final _requestSync$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void requestSync(android.content.SyncRequest syncRequest)`
  static void requestSync$1(
    _$jni.JObject syncRequest,
  ) {
    _requestSync$1(
            _class.reference.pointer,
            _id_requestSync$1 as _$jni.JMethodIDPtr,
            syncRequest.reference.pointer)
        .check();
  }

  static final _id_validateSyncExtrasBundle = _class.staticMethodId(
    r'validateSyncExtrasBundle',
    r'(Landroid/os/Bundle;)V',
  );

  static final _validateSyncExtrasBundle = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void validateSyncExtrasBundle(android.os.Bundle bundle)`
  static void validateSyncExtrasBundle(
    _$jni.JObject bundle,
  ) {
    _validateSyncExtrasBundle(
            _class.reference.pointer,
            _id_validateSyncExtrasBundle as _$jni.JMethodIDPtr,
            bundle.reference.pointer)
        .check();
  }

  static final _id_cancelSync = _class.instanceMethodId(
    r'cancelSync',
    r'(Landroid/net/Uri;)V',
  );

  static final _cancelSync = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void cancelSync(android.net.Uri uri)`
  void cancelSync(
    _$jni.JObject uri,
  ) {
    _cancelSync(reference.pointer, _id_cancelSync as _$jni.JMethodIDPtr,
            uri.reference.pointer)
        .check();
  }

  static final _id_cancelSync$1 = _class.staticMethodId(
    r'cancelSync',
    r'(Landroid/accounts/Account;Ljava/lang/String;)V',
  );

  static final _cancelSync$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void cancelSync(android.accounts.Account account, java.lang.String string)`
  static void cancelSync$1(
    _$jni.JObject account,
    _$jni.JString string,
  ) {
    _cancelSync$1(
            _class.reference.pointer,
            _id_cancelSync$1 as _$jni.JMethodIDPtr,
            account.reference.pointer,
            string.reference.pointer)
        .check();
  }

  static final _id_getSyncAdapterTypes = _class.staticMethodId(
    r'getSyncAdapterTypes',
    r'()[Landroid/content/SyncAdapterType;',
  );

  static final _getSyncAdapterTypes = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public android.content.SyncAdapterType[] getSyncAdapterTypes()`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JArray<_$jni.JObject> getSyncAdapterTypes() {
    return _getSyncAdapterTypes(_class.reference.pointer,
            _id_getSyncAdapterTypes as _$jni.JMethodIDPtr)
        .object(const _$jni.JArrayType(_$jni.JObjectType()));
  }

  static final _id_getSyncAutomatically = _class.staticMethodId(
    r'getSyncAutomatically',
    r'(Landroid/accounts/Account;Ljava/lang/String;)Z',
  );

  static final _getSyncAutomatically = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public boolean getSyncAutomatically(android.accounts.Account account, java.lang.String string)`
  static bool getSyncAutomatically(
    _$jni.JObject account,
    _$jni.JString string,
  ) {
    return _getSyncAutomatically(
            _class.reference.pointer,
            _id_getSyncAutomatically as _$jni.JMethodIDPtr,
            account.reference.pointer,
            string.reference.pointer)
        .boolean;
  }

  static final _id_setSyncAutomatically = _class.staticMethodId(
    r'setSyncAutomatically',
    r'(Landroid/accounts/Account;Ljava/lang/String;Z)V',
  );

  static final _setSyncAutomatically = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int)>();

  /// from: `static public void setSyncAutomatically(android.accounts.Account account, java.lang.String string, boolean z)`
  static void setSyncAutomatically(
    _$jni.JObject account,
    _$jni.JString string,
    bool z,
  ) {
    _setSyncAutomatically(
            _class.reference.pointer,
            _id_setSyncAutomatically as _$jni.JMethodIDPtr,
            account.reference.pointer,
            string.reference.pointer,
            z ? 1 : 0)
        .check();
  }

  static final _id_addPeriodicSync = _class.staticMethodId(
    r'addPeriodicSync',
    r'(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;J)V',
  );

  static final _addPeriodicSync = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int64
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int)>();

  /// from: `static public void addPeriodicSync(android.accounts.Account account, java.lang.String string, android.os.Bundle bundle, long j)`
  static void addPeriodicSync(
    _$jni.JObject account,
    _$jni.JString string,
    _$jni.JObject bundle,
    int j,
  ) {
    _addPeriodicSync(
            _class.reference.pointer,
            _id_addPeriodicSync as _$jni.JMethodIDPtr,
            account.reference.pointer,
            string.reference.pointer,
            bundle.reference.pointer,
            j)
        .check();
  }

  static final _id_removePeriodicSync = _class.staticMethodId(
    r'removePeriodicSync',
    r'(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _removePeriodicSync = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void removePeriodicSync(android.accounts.Account account, java.lang.String string, android.os.Bundle bundle)`
  static void removePeriodicSync(
    _$jni.JObject account,
    _$jni.JString string,
    _$jni.JObject bundle,
  ) {
    _removePeriodicSync(
            _class.reference.pointer,
            _id_removePeriodicSync as _$jni.JMethodIDPtr,
            account.reference.pointer,
            string.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_cancelSync$2 = _class.staticMethodId(
    r'cancelSync',
    r'(Landroid/content/SyncRequest;)V',
  );

  static final _cancelSync$2 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void cancelSync(android.content.SyncRequest syncRequest)`
  static void cancelSync$2(
    _$jni.JObject syncRequest,
  ) {
    _cancelSync$2(
            _class.reference.pointer,
            _id_cancelSync$2 as _$jni.JMethodIDPtr,
            syncRequest.reference.pointer)
        .check();
  }

  static final _id_getPeriodicSyncs = _class.staticMethodId(
    r'getPeriodicSyncs',
    r'(Landroid/accounts/Account;Ljava/lang/String;)Ljava/util/List;',
  );

  static final _getPeriodicSyncs = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public java.util.List getPeriodicSyncs(android.accounts.Account account, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JList<_$jni.JObject> getPeriodicSyncs(
    _$jni.JObject account,
    _$jni.JString string,
  ) {
    return _getPeriodicSyncs(
            _class.reference.pointer,
            _id_getPeriodicSyncs as _$jni.JMethodIDPtr,
            account.reference.pointer,
            string.reference.pointer)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_getIsSyncable = _class.staticMethodId(
    r'getIsSyncable',
    r'(Landroid/accounts/Account;Ljava/lang/String;)I',
  );

  static final _getIsSyncable = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticIntMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public int getIsSyncable(android.accounts.Account account, java.lang.String string)`
  static int getIsSyncable(
    _$jni.JObject account,
    _$jni.JString string,
  ) {
    return _getIsSyncable(
            _class.reference.pointer,
            _id_getIsSyncable as _$jni.JMethodIDPtr,
            account.reference.pointer,
            string.reference.pointer)
        .integer;
  }

  static final _id_setIsSyncable = _class.staticMethodId(
    r'setIsSyncable',
    r'(Landroid/accounts/Account;Ljava/lang/String;I)V',
  );

  static final _setIsSyncable = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int)>();

  /// from: `static public void setIsSyncable(android.accounts.Account account, java.lang.String string, int i)`
  static void setIsSyncable(
    _$jni.JObject account,
    _$jni.JString string,
    int i,
  ) {
    _setIsSyncable(
            _class.reference.pointer,
            _id_setIsSyncable as _$jni.JMethodIDPtr,
            account.reference.pointer,
            string.reference.pointer,
            i)
        .check();
  }

  static final _id_getMasterSyncAutomatically = _class.staticMethodId(
    r'getMasterSyncAutomatically',
    r'()Z',
  );

  static final _getMasterSyncAutomatically =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallStaticBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `static public boolean getMasterSyncAutomatically()`
  static bool getMasterSyncAutomatically() {
    return _getMasterSyncAutomatically(_class.reference.pointer,
            _id_getMasterSyncAutomatically as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setMasterSyncAutomatically = _class.staticMethodId(
    r'setMasterSyncAutomatically',
    r'(Z)V',
  );

  static final _setMasterSyncAutomatically =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
              'globalEnv_CallStaticVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public void setMasterSyncAutomatically(boolean z)`
  static void setMasterSyncAutomatically(
    bool z,
  ) {
    _setMasterSyncAutomatically(_class.reference.pointer,
            _id_setMasterSyncAutomatically as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isSyncActive = _class.staticMethodId(
    r'isSyncActive',
    r'(Landroid/accounts/Account;Ljava/lang/String;)Z',
  );

  static final _isSyncActive = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public boolean isSyncActive(android.accounts.Account account, java.lang.String string)`
  static bool isSyncActive(
    _$jni.JObject account,
    _$jni.JString string,
  ) {
    return _isSyncActive(
            _class.reference.pointer,
            _id_isSyncActive as _$jni.JMethodIDPtr,
            account.reference.pointer,
            string.reference.pointer)
        .boolean;
  }

  static final _id_getCurrentSync = _class.staticMethodId(
    r'getCurrentSync',
    r'()Landroid/content/SyncInfo;',
  );

  static final _getCurrentSync = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public android.content.SyncInfo getCurrentSync()`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject getCurrentSync() {
    return _getCurrentSync(
            _class.reference.pointer, _id_getCurrentSync as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_getCurrentSyncs = _class.staticMethodId(
    r'getCurrentSyncs',
    r'()Ljava/util/List;',
  );

  static final _getCurrentSyncs = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public java.util.List getCurrentSyncs()`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JList<_$jni.JObject> getCurrentSyncs() {
    return _getCurrentSyncs(
            _class.reference.pointer, _id_getCurrentSyncs as _$jni.JMethodIDPtr)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_isSyncPending = _class.staticMethodId(
    r'isSyncPending',
    r'(Landroid/accounts/Account;Ljava/lang/String;)Z',
  );

  static final _isSyncPending = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public boolean isSyncPending(android.accounts.Account account, java.lang.String string)`
  static bool isSyncPending(
    _$jni.JObject account,
    _$jni.JString string,
  ) {
    return _isSyncPending(
            _class.reference.pointer,
            _id_isSyncPending as _$jni.JMethodIDPtr,
            account.reference.pointer,
            string.reference.pointer)
        .boolean;
  }

  static final _id_addStatusChangeListener = _class.staticMethodId(
    r'addStatusChangeListener',
    r'(ILandroid/content/SyncStatusObserver;)Ljava/lang/Object;',
  );

  static final _addStatusChangeListener = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Int32, _$jni.Pointer<_$jni.Void>)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public java.lang.Object addStatusChangeListener(int i, android.content.SyncStatusObserver syncStatusObserver)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject addStatusChangeListener(
    int i,
    _$jni.JObject syncStatusObserver,
  ) {
    return _addStatusChangeListener(
            _class.reference.pointer,
            _id_addStatusChangeListener as _$jni.JMethodIDPtr,
            i,
            syncStatusObserver.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_removeStatusChangeListener = _class.staticMethodId(
    r'removeStatusChangeListener',
    r'(Ljava/lang/Object;)V',
  );

  static final _removeStatusChangeListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallStaticVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void removeStatusChangeListener(java.lang.Object object)`
  static void removeStatusChangeListener(
    _$jni.JObject object,
  ) {
    _removeStatusChangeListener(
            _class.reference.pointer,
            _id_removeStatusChangeListener as _$jni.JMethodIDPtr,
            object.reference.pointer)
        .check();
  }

  static final _id_getTypeInfo = _class.instanceMethodId(
    r'getTypeInfo',
    r'(Ljava/lang/String;)Landroid/content/ContentResolver$MimeTypeInfo;',
  );

  static final _getTypeInfo = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final android.content.ContentResolver$MimeTypeInfo getTypeInfo(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  ContentResolver_MimeTypeInfo getTypeInfo(
    _$jni.JString string,
  ) {
    return _getTypeInfo(reference.pointer,
            _id_getTypeInfo as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(const $ContentResolver_MimeTypeInfo$Type());
  }

  static final _id_loadThumbnail = _class.instanceMethodId(
    r'loadThumbnail',
    r'(Landroid/net/Uri;Landroid/util/Size;Landroid/os/CancellationSignal;)Landroid/graphics/Bitmap;',
  );

  static final _loadThumbnail = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.graphics.Bitmap loadThumbnail(android.net.Uri uri, android.util.Size size, android.os.CancellationSignal cancellationSignal)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject loadThumbnail(
    _$jni.JObject uri,
    _$jni.JObject size,
    _$jni.JObject cancellationSignal,
  ) {
    return _loadThumbnail(
            reference.pointer,
            _id_loadThumbnail as _$jni.JMethodIDPtr,
            uri.reference.pointer,
            size.reference.pointer,
            cancellationSignal.reference.pointer)
        .object(const _$jni.JObjectType());
  }
}

final class $ContentResolver$Type extends _$jni.JObjType<ContentResolver> {
  @_$jni.internal
  const $ContentResolver$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/content/ContentResolver;';

  @_$jni.internal
  @_$core.override
  ContentResolver fromReference(_$jni.JReference reference) =>
      ContentResolver.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($ContentResolver$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContentResolver$Type) &&
        other is $ContentResolver$Type;
  }
}
